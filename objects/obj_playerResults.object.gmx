<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get input

m_inputSelect = gamepad_button_check_pressed(m_controllerId, gp_face1);
m_inputBack = gamepad_button_check_pressed(m_controllerId, gp_face2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get input keyboar

if(m_keybaord)
{
    // Buttons
    m_inputSelect = keyboard_check_pressed(vk_enter);
    m_inputBack = keyboard_check_pressed(vk_escape);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// BoxUpdate

// Lerp the size
m_drawWidth = lerp(m_drawWidth, m_contWidth, 0.2) + (cos(m_containterSin) * 2);
m_drawHeight = lerp(m_drawHeight, m_contHeight, 0.2) + (sin(m_containterSin) * 2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do tings for all states

/*
if((m_inputBack) &amp;&amp; (m_currentState &gt; 0))
{
    m_currentState--;
    audio_play_sound(snd_charReturn, 1, 0);
    obj_drawRays.m_multiplier -= 5;
}
*/

m_sinCounter += 0.03;
m_containterSin -= 0.07;

if(m_currentState == 3)
{
    m_ready = true;
}
else
{
    m_ready = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update for state 0

if(m_currentState == 0)
{
    // set the box to the right size
    m_contWidth = 330;
    m_contHeight = 440;

    // Check for input
    if (m_inputSelect) // Go to the next state
    { 
        m_currentState++; 
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>"Create Event"</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initalize variables

//m_id
m_keybaord = true;
m_currentState = 0; // The current state of the box
m_ready = false;
//m_totalAmount // The total amount of this object, used for positioning

m_drawWidth = 0; // The current width of the container
m_drawHeight = 0; // The current height of the container

m_contWidth = 0; // The width where the box lerps to
m_contHeight = 0; // The height where the box lerps to

m_sinCounter = 0; // Value for sinus effects
m_containterSin = (m_id / 4);

/// Input
m_controllerId = m_id; // Which controller controlls this selector

m_inputSelect = false;
m_inputBack = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set position

y = (room_height / 2) + (room_height / 8);
x = room_width / 4 * (m_controllerId+1) - room_width / 8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the container
var w = m_drawWidth/2;
var h = m_drawHeight/2;

// Draw box
draw_set_color(c_black);
draw_set_alpha(0.2);
draw_roundrect(x - w, y - h, x + w, y + h, false);

draw_set_alpha(1);

// Draw outline
draw_roundrect_width(x - w, y - h, x + w, y + h, 6);

// Draw text
draw_set_font(fnt_gui);
draw_set_valign(fa_bottom);
draw_set_color(global.playerColor[m_id]);
draw_text_outline(x, y-h-4, global.playerName[m_id], 3, c_black, 42);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw exclusively for state 0
if(m_currentState == 0)
{
    var w = m_drawWidth;
    var h = m_drawHeight;
    draw_set_font(fnt_letters);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_set_color(c_black);
    draw_text(x, y,
    "Ur stats:#
    Jumps: " + string(global.jumps[m_id]) + "#" +
    "AirTime: " + string(global.airTime[m_id] / 60) + "s" + "#" +
    "Arrows Fired: " + string(global.arrowsFired[m_id]) + "#" +
    "Abilites used: " + string(global.abilitiesUsed[m_id]) + "#" +
    "Deaths: " + string(global.deaths[m_id]) + "#" +
    "Self kills: " + string(global.selfKills[m_id]))
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw outline
var w = m_drawWidth/2;
var h = m_drawHeight/2;


draw_set_color(c_black);
draw_set_alpha(1);

draw_roundrect_width(x - w, y - h, x + w, y + h, 6);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
