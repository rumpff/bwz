<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initalize variables

for (i = 0; i &lt; global.maxPlayers; i++)
{
    m_playerArray[i] = noone;
    m_playerDeathTimers[i] = 0;
    m_playerAbilityActive[i] = false;
    m_playerScore[i] = 0;
    m_playerKillStreak[i] = 0;
    m_abilityDrawValue[i] = 0;
    m_playerBounty[i] = false;
}

m_sfxList = ds_list_create();

m_guiW = 0;
m_guiH = 0;

m_indicatorAlpha = 0;
m_deathSlowdown = 99^99;

m_gameEnd = false;
m_winner = -1;
m_endTimer = 0;

m_gameStarted = false;
m_gameStartTimer = 180;
m_gamePaused = false;
m_pauseHost = 0;
m_pauseText = "";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control pause
if(m_gamePaused)
{
    global.timeScale = 0;
    
    if(gamepad_button_check_pressed(m_pauseHost, gp_start))
    {
        m_gamePaused = false;
    }
    
    if(gamepad_button_check_pressed(m_pauseHost, gp_select))
    {
        game_restart();
    }
}
else
{
    for (i = 0; i &lt; global.playerAmount; i++)
    {
        if(gamepad_button_check_pressed(i, gp_start))
        {
            m_gamePaused = true;
            m_pauseHost = 0;
            m_pauseText = random_pausetext();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Time timerz
if(!m_gamePaused &amp;&amp; m_gameStarted &amp;&amp; !m_gameEnd)
{
    global.gameTime += (delta_time / 1000000);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update values

m_guiW = display_get_gui_width();
m_guiH = display_get_gui_height();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start game
if(m_gameStartTimer &lt;= 0 &amp;&amp; !m_gameStarted)
{
    // Create instances
    for (i=0; i&lt;instance_number(obj_spawnLocation); i+=1)
    {
        m_spawnLocations[i] = instance_find(obj_spawnLocation, i);
    }
    
    
    for (i = 0; i &lt; global.playerAmount; i++)
    {
        m_playerArray[i] = spawn_player(m_spawnLocations, i);
    }
    
    instance_create(x, y, obj_camera);
    
    // Start music
    m_bgm = audio_play_sound(bgm_game, 1 , 0);
    
    m_gameStarted = true;
}
else if(!m_gameStarted)
{
    m_gameStartTimer--;
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control Death timers

for (i = 0; i &lt; global.playerAmount; i++)
{
   if(!instance_exists(m_playerArray[i]))
   {
      if (m_playerDeathTimers[i] &gt; 0)
      {
         m_playerDeathTimers[i] -= global.timeScale;
      }
      else
      {
         m_playerArray[i] = spawn_player(m_spawnLocations, i);
      }
   }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update SFX

for (i = 0; i &lt; ds_list_size(m_sfxList); i++)
{
    var snd = ds_list_find_value(m_sfxList, i);
    
    // Check if the sound is playing or not
    if(audio_is_playing(snd))
    {
        // set the pitch to the speed of the game
        audio_sound_pitch(snd, global.timeScale);
    }
    else
    {
        // Remove the item from the list
        ds_list_delete(m_sfxList, i);
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Give players ability timer shit euhh

for (i = 0; i &lt; global.playerAmount; i++)
{
    if(m_playerAbilityActive[i])
    {
        global.playerAbility[i] -= 0.07;
        
        if(global.playerAbility[i] &lt; 0)
        {
            play_sound(snd_abilityDeactivate);
            m_playerAbilityActive[i] = false;
        }
    }
    else if(instance_exists(m_playerArray[i]))
    {
        global.playerAbility[i] += 0.01;
         
        global.playerAbility[i] = clamp(global.playerAbility[i], 0, 100);
    }
     
    m_abilityDrawValue[i] = lerp(m_abilityDrawValue[i], global.playerAbility[i], 0.3);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Music

if(!audio_is_playing(m_bgm))
{
    m_bgm = audio_play_sound(bgm_game, 1 , 0);
}

audio_sound_pitch(m_bgm, global.timeScale);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do timescale thingy
if(!m_gamePaused)
{
    var time = clamp(m_deathSlowdown, 0, 80);
    global.timeScale = ease_out_quint(time, 0.01, 0.99, 80);
    
    m_deathSlowdown++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do gameEnded stuff
if(m_gameEnd)
{
    global.timeScale = 0.05;
    audio_stop_sound(m_bgm);
    screenshake(m_endTimer/6);
    
    if(m_endTimer/200 &gt; 1)
    {
        audio_stop_all();
        room_goto(rm_matchResult);
    }
    m_endTimer++;
    
}
else // Check if someone won already
{
    for (i = 0; i &lt; global.playerAmount; i++)
    {
        if(m_playerScore[i] &gt;= SCORE_CAP)
        {
            m_gameEnd = true;
            global.winner = i;
            audio_play_sound(snd_rumble, 1, 0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update bounty state

for (i = 0; i &lt; global.maxPlayers; i++)
{
    if(m_playerKillStreak[i] &gt; BOUNTY_THRESHOLD)
    {
        if(m_playerBounty[i] == false)
        {
            var effect = instance_create(0, 0, obj_bountyEffect);
            effect.player = i;
            with(effect) { event_user(0); }
        }
        m_playerBounty[i] = true;
    }
    else
    m_playerBounty[i] = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.timeScale -= 0.05;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.timeScale += 0.05;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shoot_arrow(mouse_x, mouse_y, 0, 15, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set screen to full and shit
window_set_fullscreen(true);

view_wport[0] = display_get_width();
view_hport[0] = display_get_height();

view_wview[0] = display_get_width();
view_hview[0] = display_get_height();

view_xview = (room_width/2 - view_wview/2);
view_yview = (room_height/2 - view_hview/2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Powerup

draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_font(fnt_gui);

//draw_text(m_guiW/2, 20, "Koele kid");

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player info
var pAmount = global.playerAmount;
var bW = 96; // box Width
var bH = 128; // box Height

for (i = 0; i &lt; pAmount; i++)
{
    var baseAlpha = 1;
    var xP = (m_guiW / pAmount / 2) + (m_guiW / pAmount * i); // X center
    var yP = (m_guiH/2 + m_guiH/3); // Y center
    var playerCol = global.playerColor[i];
    
    // Check if there's a player behind the ui element
    for (ii = 0; ii &lt; pAmount; ii++)
    {
        if(instance_exists(m_playerArray[ii]))
        {
            var px = x_to_gui_x(m_playerArray[ii].x);
            var py = y_to_gui_y(m_playerArray[ii].y);
            
            if((px &gt; xP - 96 &amp;&amp; px &lt; xP + 96) &amp;&amp; (py &gt; yP - (24*3) &amp;&amp; py &lt; yP + (24*3)))
            {
                baseAlpha = 0.3;
            }
        }
    }
    
    // Draw the box
    draw_set_color(playerCol);
    draw_set_alpha(0.4 * baseAlpha);
    draw_rectangle(xP - 64, yP, xP - 64 + (24*4), yP + (24*4), false);
    draw_set_alpha(1 * baseAlpha);
    
    // Draw the score    
    draw_set_halign(fa_left);
    draw_set_valign(fa_left);
    draw_set_font(fnt_score);
    
    draw_set_color(c_black);
    draw_text_outline(xP+42, yP, m_playerScore[i], 1, c_black, 50);
    
    draw_set_color(c_white);
    draw_text_outline(xP-5+42, yP-5, m_playerScore[i], 1, c_black, 50);
       
    // Draw player sprite
    
    var headSprite = head_sprite(global.playerHead[i]);
    var sprW = sprite_get_width(headSprite);
    var sprH = sprite_get_height(headSprite)
    
    draw_sprite_part_ext(headSprite, 0, 8, 8, 24, 24, xP - 64, yP,
    4, 4, c_white, baseAlpha);
    
    // Draw ability healthbar
    var hbCol
    if(m_abilityDrawValue[i] &lt; 100) { hbCol = playerCol; }
    else { hbCol = c_white; }
    draw_healthbar(xP - 96, yP ,xP - 80, yP + (24*4), m_abilityDrawValue[i], c_black, hbCol, hbCol, 3, true, true)
    
    
    // Draw player name
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_font(fnt_gui);
    
    var shadowcol = make_color_hsv(color_get_hue(playerCol), 255, 100)
    
    draw_set_color(shadowcol); 
    
    draw_text(xP - 64 + 4, yP+(24*3)+4, global.playerName[i]);
    
    draw_set_color(c_white); 
    draw_text_outline(xP - 64, yP+(24*3), global.playerName[i], 1, shadowcol, 50);
    
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw player indicators
var pAmount = global.playerAmount;
var alpha;

if(view_wview &gt; 2500) { alpha = 0.7; }
else { alpha = 0; }

m_indicatorAlpha = lerp(m_indicatorAlpha, alpha, 0.2);

for (i = 0; i &lt; pAmount; i++)
{
    if(instance_exists(m_playerArray[i]))
    {
        var xp = x_to_gui_x(m_playerArray[i].x);
        var yp = y_to_gui_y(m_playerArray[i].y);
        
        draw_set_alpha(m_indicatorAlpha);
        draw_set_color(global.playerColor[i]);
        
        draw_set_halign(fa_center);
        draw_set_valign(fa_top);
        
        draw_text(xp, yp - 96, global.playerName[i]);
        draw_triangle(xp - 16, yp - 48, xp + 16, yp - 48, xp, yp - 32, false);
        //draw_sprite_ext(spr_indicator, i, xp, yp, 1, 1, 0, m_playerColor[i], 0.5);
        
        draw_set_alpha(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw time

draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_set_color(c_white);

var timeStr, secStr, milStr;

timeStr = string(global.gameTime div 60);
if(string_length(timeStr) &lt; 2) { timeStr = "0" + timeStr; }

secStr = string(floor(global.gameTime) mod 60);
if(string_length(secStr) &lt; 2) { secStr = "0" + secStr; }

milStr = string(floor(frac(global.gameTime) * 100));
if(string_length(milStr) &lt; 2) { milStr = "0" + milStr; }

draw_text(m_guiW/2, 20, timeStr + ":"  + secStr + ":" + milStr );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw paused overlay

if(m_gamePaused)
{
    draw_set_color(c_black);
    draw_set_alpha(0.6);
    draw_rectangle(0, 0, m_guiW, m_guiH, 0);
    draw_set_alpha(1);
    
    draw_set_color(c_white);
    draw_set_font(fnt_score);
    draw_set_valign(fa_center);
    draw_text_ext(m_guiW/2, m_guiH/4 , "boi that "+ m_pauseText +": " + string(global.playerName[m_pauseHost]), -1, m_guiH);
    
    draw_set_color(c_white);
    draw_set_font(fnt_score);
    draw_set_valign(fa_center);
    draw_text_transformed(m_guiW/2, m_guiH/2, "PAUSED", 4, 4, 0);

    draw_set_blend_mode( bm_add );
    draw_set_color(c_red);
    draw_text_transformed(m_guiW/2 - 10 + random_range(-2, 2), m_guiH/2+3 + random_range(-2, 2), "PAUSED", 4, 4, 0);
    
    draw_set_color(c_blue);
    draw_text_transformed(m_guiW/2 + 10 + random_range(-2, 2), m_guiH/2-3 + random_range(-2, 2), "PAUSED", 4, 4, 0);
    
    draw_set_color(c_lime);
    draw_text_transformed(m_guiW/2 + 10 + random_range(-2, 2), m_guiH/2-3 + 7 + random_range(-2, 2), "PAUSED", 4, 4, 0);
    draw_set_blend_mode( bm_normal );
    
    draw_set_color(c_white);
    draw_set_font(fnt_score);
    draw_set_valign(fa_center);
    draw_text(m_guiW/2, m_guiH/2 + m_guiH/4, "start - continue#back - quit");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw ending shit

if(m_gameEnd)
{
    draw_set_color(c_white);
    draw_set_alpha(m_endTimer/200);
    draw_rectangle(0, 0, m_guiW, m_guiH, 0);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!m_gameStarted)
{
    var numb = floor(m_gameStartTimer / 60) + 1;
    if(numb &lt;= 3)
    {
        draw_set_color(c_white);
        draw_set_font(fnt_score);
        draw_set_valign(fa_center);
        draw_text_transformed(m_guiW/2, m_guiH/2, numb, 3, 3, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
