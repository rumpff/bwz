<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Zoom in/out boundary thickness
LineWidth = 2;

x_Center = room_width/2;
y_Center = room_height/2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize center of mass
x_COM = 0;
y_COM = 0;
Offset_COM = 12;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize zoom parameters
x_Max = 0;
y_Max = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initalize effect variables

y_BumpOffset = 0;
y_Bump = 32;

m_shakeMagnitude = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Physics
physics_world_create(1/10);
physics_world_gravity(0, 0);
physics_world_update_iterations(10);
physics_world_update_speed(room_speed);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create camera Trackers
Players = global.playerAmount;
dx_Spawn = 128;

for (var i = 0; i &lt; Players; i++)
{
    PlayerID[i] = instance_create(x_Center - (dx_Spawn * (Players - 1) / 2) + (dx_Spawn * i), y_Center, obj_camTracker);
    
    PlayerID[i].ControllerID = id;
    PlayerID[i].WhoAmI = "P" + string(i + 1);
    PlayerID[i].image_index = i;
    
    // If using physics
    x_COM += PlayerID[i].phy_position_x;
    y_COM += PlayerID[i].phy_position_y;
    
    // If not using physics
    //x_COM += PlayerID[i].x;
    //y_COM += PlayerID[i].y;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Calculate center of mass
x_COM /= Players;
y_COM /= Players;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera
view_xview[0] = x_Center - view_wview[0]/2;
view_yview[0] = y_Center - view_hview[0]/2;
ViewRatio = view_wview[0] / view_hview[0];                  // View ration ensures width and height will scale proportionally

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Panning parameters
x_Camera = view_xview[0] + view_wview[0]/2;
y_Camera = view_yview[0] + view_hview[0]/2;
PanSpeed = 0.6;                                             // Must be between 0 and 1; the larger the faster the pan speed

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Zoom parameters
x_Zoom = x_Camera;
y_Zoom = y_Camera;
ZoomOutSpeed = 0.6;                                         // Must be between 0 and 1; the larger the faster the zoom out speed
ZoomInSpeed = 0.8;                                          // Must be between 0 and 1; the larger the faster the zoom out speed
ZoomMax = room_width;
ZoomMin = view_wview[0];
ZoomOutBoundary = 0.6;                                      // Must be between 0 and 1; the larger the closer to the edge the player must travel before zooming out
x_ZoomOut = ZoomOutBoundary * view_wview[0];
y_ZoomOut = ZoomOutBoundary * view_hview[0];
ZoomInBoundary = 0.4                                        // Must be between 0 and 1; the smaller the closer to the center the player must travel before zooming in
x_ZoomIn = ZoomInBoundary * view_wview[0];
y_ZoomIn = ZoomInBoundary * view_hview[0];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Calculate center of mass 
//* using all players' coordinates and check for (x, y) min / max 
x_COM = 0;
y_COM = 0;

x_Max = 0;
y_Max = 0;

for (var i = 0; i &lt; Players; i++)
{
    // If using physics
    x_COM += PlayerID[i].phy_position_x;
    y_COM += PlayerID[i].phy_position_y;
    
    // If not using physics
    //x_COM += PlayerID[i].x;
    //y_COM += PlayerID[i].y;
    
    if (abs(PlayerID[i].phy_position_x - x_Zoom) &gt; x_Max)
    {
        x_Max = abs(PlayerID[i].phy_position_x - x_Zoom);
        //x_Max = PlayerID[i].x - x_Zoom;
    }
    
    if (abs(PlayerID[i].phy_position_y - y_Zoom) &gt; y_Max)
    {
        y_Max = abs(PlayerID[i].phy_position_y - y_Zoom);
        //y_Max = PlayerID[i].y - y_Zoom;
    }
}







</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera Zooming
    // Zoom out
if (!point_in_rectangle(x_Max, y_Max, 0, 0, x_ZoomOut/2, y_ZoomOut/2))
{
    if (x_Max &gt;= x_ZoomOut/2)
    {
        // Modified cubic easing in/out from http://gizma.com/easing/
        view_wview[0] = median(ZoomMin, ZoomMax, ZoomOutSpeed * ZoomOutSpeed * ZoomOutSpeed * (x_Max - x_ZoomOut/2)/2 + view_wview[0]);
        view_hview[0] = view_wview[0] / ViewRatio;
    }
    if (y_Max &gt;= y_ZoomOut/2)
    {
        // Modified cubic easing in/out from http://gizma.com/easing/
        view_hview[0] = median(ZoomMin / ViewRatio, ZoomMax / ViewRatio, ZoomOutSpeed * ZoomOutSpeed * ZoomOutSpeed * (y_Max - y_ZoomOut/2)/2 + view_hview[0]);
        view_wview[0] = view_hview[0] * ViewRatio;
    }
    
    ZoomInitial = view_wview[0];
    ZoomCurrent = ZoomInitial;
}
    // Zoom in
else if (point_in_rectangle(x_Max, y_Max, 0, 0, x_ZoomIn/2, y_ZoomIn/2))
{
    if (x_Max / x_ZoomIn/2 &gt;= y_Max / y_ZoomIn/2)
    {
        // Modified cubic easing in/out from http://gizma.com/easing/
        view_wview[0] = median(ZoomMin, ZoomMax, ZoomInSpeed * ZoomInSpeed * ZoomInSpeed * (x_Max - x_ZoomIn/2)/2 + view_wview[0]);
        view_hview[0] = view_wview[0] / ViewRatio;
    }
    else
    {
        // Modified cubic easing in/out from http://gizma.com/easing/
        view_hview[0] = median(ZoomMin / ViewRatio, ZoomMax / ViewRatio, ZoomInSpeed * ZoomInSpeed * ZoomInSpeed * (y_Max - y_ZoomIn/2)/2 + view_hview[0]);
        view_wview[0] = view_hview[0] * ViewRatio;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update zoom boundaries 
//* to reflect changes in view size

x_ZoomOut = ZoomOutBoundary * view_wview[0];
y_ZoomOut = ZoomOutBoundary * view_hview[0];
x_ZoomIn = ZoomInBoundary * view_wview[0];
y_ZoomIn = ZoomInBoundary * view_hview[0];
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update camera effects

// Screenshake
m_shakeMagnitude = lerp(m_shakeMagnitude, 0, 0.2);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Center of mass

x_COM /= Players;
y_COM /= Players;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera position 
    // Modified cubic easing in/out from http://gizma.com/easing/
    
var shakeX = random_range(-m_shakeMagnitude, m_shakeMagnitude);
var shakeY = random_range(-m_shakeMagnitude, m_shakeMagnitude);

x_Camera = PanSpeed * PanSpeed * PanSpeed * (x_COM - x_Camera)/2 + x_Camera + shakeX;
y_Camera = PanSpeed * PanSpeed * PanSpeed * (y_COM - y_Camera)/2 + y_Camera + shakeY;

view_xview = x_Camera - view_wview[0]/2;
view_yview = y_Camera - view_hview[0]/2;

x_Zoom = view_xview[0] + view_wview[0]/2;
y_Zoom = view_yview[0] + view_hview[0]/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Adds camera bump for when dash hits the ground

y_BumpOffset += y_Bump;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw debug info

draw_set_alpha(1);
draw_set_colour(c_white);

//draw_sprite(spr_COM, 0, x_COM, y_COM);
//draw_sprite(spr_cam, 0, x_Camera, y_Camera);

draw_set_colour(c_blue);
//draw_set_font(fnt_COM);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

draw_text(x_COM, y_COM - Offset_COM, "COM");

draw_set_colour(c_red);

draw_text(x_Camera, y_Camera + Offset_COM, "Camera");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
draw_set_colour(c_black);
//draw_set_font(fnt_COM);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

draw_text(4, 4, "x_COM: " + string_format(x_COM, 5, 0));
draw_text(4, 24, "y_COM: " + string_format(y_COM, 5, 0));

draw_text(4, 54, "x_ZoomIn/2: " + string_format(x_ZoomIn/2, 5, 0));
draw_text(4, 74, "x_Max: " + string_format(x_Max, 5, 0));
draw_text(4, 94, "x_ZoomOut/2: " + string_format(x_ZoomOut/2, 5, 0));

draw_text(4, 124, "y_ZoomIn/2: " + string_format(y_ZoomIn/2, 5, 0));
draw_text(4, 144, "y_Max: " + string_format(y_Max, 5, 0));
draw_text(4, 164, "y_ZoomOut/2: " + string_format(y_ZoomOut/2, 5, 0));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);

// Zoom out boundary

var X1 = x_Zoom - x_ZoomOut/2,
    Y1 = y_Zoom - y_ZoomOut/2,
    X2 = x_Zoom + x_ZoomOut/2,
    Y2 = y_Zoom + y_ZoomOut/2,

draw_set_colour(c_blue);

draw_line_width(X1, Y1, X2, Y1, LineWidth);
draw_line_width(X1, Y1, X1, Y2, LineWidth);
draw_line_width(X2, Y1, X2, Y2, LineWidth);
draw_line_width(X1, Y2, X2, Y2, LineWidth);

// Zoom in boundary

var X1 = x_Zoom - x_ZoomIn/2,
    Y1 = y_Zoom - y_ZoomIn/2,
    X2 = x_Zoom + x_ZoomIn/2,
    Y2 = y_Zoom + y_ZoomIn/2,

draw_set_colour(c_red);

draw_line_width(X1, Y1, X2, Y1, LineWidth);
draw_line_width(X1, Y1, X1, Y2, LineWidth);
draw_line_width(X2, Y1, X2, Y2, LineWidth);
draw_line_width(X1, Y2, X2, Y2, LineWidth);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
