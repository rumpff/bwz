<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>m_id = 0;
event_user(0);

m_maxWidth = room_width / 2;
m_maxHeight = room_height / 2;

m_boxSizeW = 0;
m_boxSizeH = 0;

m_titleString = "";
m_titleOffsetX = 0;
m_titleOffsetY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get input
// Up
if (gamepad_axis_value(m_controllerId, gp_axislv) &lt; -m_gpDeadzone)
{
    m_inputUp = input_timers_active(0);
}
else
{   
    // Check for d-pad
    if(gamepad_button_check_pressed(m_controllerId, gp_padu))
    {
        m_inputUp = true;
    }
    else
    {
        // Reset all timer values
        m_inputUp = input_timers_reset(0);
    }
}

// Down
if (gamepad_axis_value(m_controllerId, gp_axislv) &gt; m_gpDeadzone)
{
    m_inputDown = input_timers_active(1);
}
else
{
    // Check for d-pad
    if(gamepad_button_check_pressed(m_controllerId, gp_padd))
    {
        m_inputDown = true;
    }
    else
    {
        // Reset all timer values
        m_inputDown = input_timers_reset(0);
    }
}

// Left
if (gamepad_axis_value(m_controllerId, gp_axislh) &lt; -m_gpDeadzone)
{
    m_inputLeft = input_timers_active(2);
}
else
{
    // Check for d-pad
    if(gamepad_button_check_pressed(m_controllerId, gp_padl))
    {
        m_inputLeft = true;
    }
    else
    {
        // Reset all timer values
        m_inputLeft = input_timers_reset(0);
    }
}

// Right
if (gamepad_axis_value(m_controllerId, gp_axislh) &gt; m_gpDeadzone)
{
    m_inputRight = input_timers_active(3);
}
else
{
    // Check for d-pad
    if(gamepad_button_check_pressed(m_controllerId, gp_padr))
    {
        m_inputRight = true;
    }
    else
    {
        // Reset all timer values
        m_inputRight = input_timers_reset(0);
    }
}

// Buttons
m_inputSelect = gamepad_button_check_pressed(m_controllerId, gp_face1);
m_inputShift = gamepad_button_check(m_controllerId, gp_shoulderrb);
m_inputBack = gamepad_button_check_pressed(m_controllerId, gp_face2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get input keyboar

if(false)
{
    // Up
    m_inputUp = keyboard_check_pressed(vk_up);
    
    // Down
    m_inputDown = keyboard_check_pressed(vk_down);
    
    // Left
    m_inputLeft = keyboard_check_pressed(vk_left);
    
    // Right
    
    m_inputRight = keyboard_check_pressed(vk_right);
    
    // Buttons
    m_inputSelect = keyboard_check_pressed(vk_enter);
    m_inputShift = keyboard_check(vk_lshift);
    m_inputBack = keyboard_check_pressed(vk_escape);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// [Waiting] Update

if(m_state == CharStates.Waiting)
{
    m_titleString = "press A to join";
    m_titleOffsetX = 0;
    m_titleOffsetY = 0;
    
    m_boxSizeW = m_maxWidth * 0.66;
    m_boxSizeH = m_maxHeight * 0.3;

    // Check for input
    if (m_inputSelect) // Go to the next state
    { 
        m_state++; 
        audio_play_sound(snd_pressedA, 1, 0); 
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>"Create Event"</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initalize variables


enum CharStates // The states where the box can be in
{
    Waiting,
    Name,
    Ready
}

m_keybaord = false;
m_state = 0; // The current state of the box
m_ready = false;
//m_totalAmount = noone; // The total amount of this object, used for positioning

m_drawWidth = 0; // The current width of the container
m_drawHeight = 0; // The current height of the container

m_contWidth = 0; // The width where the box lerps to
m_contHeight = 0; // The height where the box lerps to

m_sinCounter = 0; // Value for sinus effects
m_containterSin = (m_id / 4);

m_uwahTimer = 0;

m_infoTextSize = 32;

/// Input
m_controllerId = m_id; // Which controller controlls this selector
m_gpDeadzone = 0.3;

m_inputUp = false;
m_inputDown = false;
m_inputLeft = false;
m_inputRight = false;
m_inputSelect = false;
m_inputBack = false;

m_inputTimerMax = 22;
m_inputTimerMin = 10;

for (i = 0; i &lt; 4; i++) // 0 = up, 1 = down, 2 = left, 3 = right
{
    m_inputTimer[i] = 0;
    m_inputTimerCurrent[i] = m_inputTimerMax;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set position


x = room_width / 4 + ((room_width / 2) * (m_id % 2 == 1));
y = room_height / 4 + ((room_height / 2) * (m_id &gt; 1));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State 1 specifics

var b2b = sqrt(sqr(16) * 2); // Selector's with to exact touch borders

m_selectorMaxDistance = b2b * 1.5;
m_clickDistance = b2b / 1.5;

m_alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;&gt;";

m_letterBoxX[0] = 0;
m_letterBoxY[0] = 0;
m_letterRot[0] = 0;
m_letterSat[0] = 0;
m_letterXOff[0] = 0;
m_letterYOff[0] = 0;

m_xRows = 4;
m_yRows = 8;

m_selectorPos = 0;
m_selectorX = x;
m_selectorY = y;
m_selectorDist = 0;
m_selectorAngleOff = 0;

m_name = ""; // The name that the player enters
m_maxNameLength = 10;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State 2 specifics

m_currentBow = 0;
m_currentHead = 0;
m_currentLeg = 0;
m_currentHat = 0;
m_currentColor = 0;

m_colorClamp = 42;

m_colorAmount = 17;
for (i = 0; i &lt; 255; i++)
{ m_colDist[i] = 0; }

m_charCurrent = 0;
m_charSelectPos = y;
m_charSelectState = 0;

m_bowThumbOffset = 0;
m_headThumbOffset = 0;
m_legThumbOffset = 0;
m_hatThumbOffset = 0;

m_bowXOffset = 0;
m_headXOffset = 0;
m_legXOffset = 0;
m_hatXOffset = 0;

m_readyText = "READY"

m_cWheelDist = 32; // Distance from innner circle of the color wheel

// Offset from the selectors xpos
m_charSLOffset = 0;
m_charSROffset = 0;

// Coordinates for the selector lines

// Left up
m_LUX1 = x;
m_LUY1 = y;
m_LUX2 = x;
m_LUY2 = y;

// Left bottom
m_LBX1 = x;
m_LBY1 = y;
m_LBX2 = x;
m_LBY2 = y;

// Right up
m_RUX1 = x;
m_RUY1 = y;
m_RUX2 = x;
m_RUY2 = y;

// Right bottom
m_RBX1 = x;
m_RBY1 = y;
m_RBX2 = x;
m_RBY2 = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw box

draw_set_color(c_black);
draw_set_alpha(.3);
draw_rectangle(x - m_boxSizeW * .5, y - m_boxSizeH * .5,
                x + m_boxSizeW * .5, y + m_boxSizeH * .5,
                false);
                
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw title
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_color(c_white);
draw_set_font(fnt_gui);

draw_text(x + m_titleOffsetX, y + m_titleOffsetY, m_titleString);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
