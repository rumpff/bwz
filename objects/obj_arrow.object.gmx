<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_arrowMask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for collision with the player

if(!m_wallHit)
{   
    var playerAmount = array_length_1d(obj_gameManager.m_playerArray);
    
    for (i=0; i&lt;playerAmount; i+=1)
    {
        var playerObject = obj_gameManager.m_playerArray[i];
                    
        //if (collision_line(x, y, xprevious, yprevious, playerObject, false, false))
        if(place_meeting(x, y, playerObject))
        {      
            if(playerObject.m_playerId == m_id &amp;&amp; m_initialCooldown &gt; 0)
            { } // Prevent player from walking in its own arrow
            else
            { death(playerObject, m_id); } // Kill that sucker
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update movement
if(!m_wallHit)
{
    m_moveY += m_grav;
    
    image_angle = point_direction(x, y, x + m_moveX, y + m_moveY);
    
    if (place_meeting(x + m_moveX, y + m_moveY, obj_collider))
    {
        var horizontalSpeed = m_moveX;
        for (i = 0; i &lt; abs(horizontalSpeed); i++)
        {
            if (!place_meeting(x + sign(horizontalSpeed), y, obj_collider))
            {
                x += sign(horizontalSpeed);
            } else break;
        };
        
        var verticalSpeed = m_moveY;
        for (i = 0; i &lt; abs(verticalSpeed); i++)
        {
            if (!place_meeting(x, y + sign(verticalSpeed), obj_collider))
            {
                y += sign(verticalSpeed);
            } else break;
        };
        
        m_wallHit = true;
    }
    else
    {
        x += m_moveX;
        y += m_moveY;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Timers

if(m_initialCooldown &gt; 0)
{ m_initialCooldown--; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>"Create event"</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initalize variables
m_moveSpeed = 46;
m_grav = 0.4;
m_length = ARROW_LENGTH;
m_wallHit = false;

m_initialCooldown = 10; // Gives the player who shot the arrow x frames of invincibility for that this arrow

m_moveX = lengthdir_x(m_moveSpeed, m_angle);
m_moveY = lengthdir_y(m_moveSpeed, m_angle);

image_xscale = m_moveSpeed / 100;
image_yscale = m_moveSpeed / 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the arrow

draw_set_color(c_white);

var angle = point_direction(x, y, x + m_moveX, y + m_moveY);

var x2 = x + lengthdir_x(m_length, angle);
var y2 = y + lengthdir_y(m_length, angle);

draw_line_width(x, y, x2, y2, ARROW_WIDTH);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
